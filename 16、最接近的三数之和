1、双指针解法
优化三重循环简化成双重
分两种情况 一种是三个数大于目标值  一种是三个数小于目标值 
要使用pair的第一个元素存放三个数的和跟目标值之间的误差  使用min进行对比 
min对于pair类型的数组的对比方式是先对第一个元素进行对比 第一个元素相等的话再对第二个元素进行对比  
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
    pair<int,int>res(INT_MAX,INT_MAX);
    sort(nums.begin(),nums.end());
    for(int i=0;i<nums.size();i++){
            for(int j=i+1,k=nums.size()-1;j<k;j++){
                while(k>j+1&&nums[i]+nums[j]+nums[k-1]>=target) k--;
                int s=nums[i]+nums[j]+nums[k];
                res=min(res,make_pair(abs(s-target),s));
                if(k<j+1) {
                    s=nums[i]+nums[j]+nums[k-1];
                    res=min(res,make_pair((target-s),s));
                } 
            }
        }
        return res.second;
    }
};
时间复杂度0（n2）
空间复杂度0（n）没有额外的空间开销  
