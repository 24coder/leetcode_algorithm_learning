1、双指针算法

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
    vector<vector<int>>res;
    sort(nums.begin(),nums.end());
    for(int i=0;i<nums.size();i++){
        if(i && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<nums.size();j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue;  //设置j>i+1 是为了i下次能够加1
                    for(int k=j+1,t=nums.size()-1;k<t;k++){
                        if(k>j+1 && nums[k]==nums[k-1]) continue;   
                        while(t>k+1 && (long long)nums[i]+(long long)nums[j]+(long long)nums[k]+(long long)nums[t-1]>=(long long)target) t--;  
                        if((long long)nums[i]+(long long)nums[j]+(long long)nums[k]+(long long)nums[t]==(long long)target)  //使用long long 进行强转  防止爆出int
                        {
                            res.push_back({nums[i],nums[j],nums[k],nums[t]}); 
                             
                        }
                    } 
            } 
    }
    return res;
    } 
    
};

