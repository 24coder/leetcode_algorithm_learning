1、暴力解法
直接两重搜索判断是否相加等于目标值
时间复杂度 o(n2)

代码示例：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    int i,j;
    for(i=0;i<nums.size()-1;i++)
    {  
        for(j=nums.size()-1;j>i;j--)
         { 
              if(nums[j]==target-nums[i])
            {
            
               return {i,j};
            }
         }
    
    }
    return{i,j};
    };
};



2、建立hash表进行查找
时间复杂度：unordered_map插入查找都是0(1)  整体代码时间复杂度是o(n)
思路：将当前位置之前不满足两数相加的都放入unordered_map中，每次移动位置都判断这个map中是否有（目标值-当前位置的值）这个值，有的话直接放回，没有的话接着将当前位置的值放入这个
map中

代码示例：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int,int>s;
    for(int i=0;i<nums.size();i++){
        int r=target-nums[i];
        if(s.count(r))
        {
            return{s[r],i};
        }
        s[nums[i]]=i;
       
    }
     return {};
    };
};
